<%@ jet package="gov.nih.nci.codegen.core.template.jet" 
        class="Bean"
        skeleton="BeanSkel.skeleton" %>
<%
	Classifier klass = (Classifier)context.get("modelElement");
	String basePkg = (String)context.get("basePackage");
	UmlClass superClass = UML13Utils.getSuperClass((UmlClass)klass);
	String pkgName = UML13Utils.getNamespaceName(UML13Utils.getPackage(UML13Utils.getModel(klass), basePkg), klass);
	String fullyQualifiedClassName = pkgName + "." + klass.getName();
	String superPkgName = null;
	if(superClass != null)
		superPkgName = UML13Utils.getNamespaceName(UML13Utils.getPackage(UML13Utils.getModel(superClass), basePkg), superClass);
	
%>
package <%=pkgName%>;

import <%=pkgName%>.*;
import gov.nih.nci.system.applicationservice.*;
import gov.nih.nci.common.util.HQLCriteria;
import java.util.*;
import org.apache.log4j.Logger;

/**
 * <!-- LICENSE_TEXT_START -->
 * <!-- LICENSE_TEXT_END -->
 */
 
<%=UML13JavaSourceHelper.getClassJavadoc(klass)%>
public <% if (klass.isAbstract()){%> abstract <%}%> class <%=klass.getName()%> 
<% if(superClass != null){ %> extends <%=superPkgName%>.<%=superClass.getName()%> <% } %>	implements java.io.Serializable 
{
	/**
	* An attribute to allow serialization of the domain objects
	*/
	private static final long serialVersionUID = 1234567890L;
	
<%//Iterate through all the attributes and generate getters and setters for the simple attributes%>
<% for(Iterator i = UML13Utils.getAttributes((UmlClass)klass).iterator(); i.hasNext();){ %>
	<% Attribute att = (Attribute)i.next(); %>
	<% String attTypeName = (getQualifiedName(att.getType(), basePkg).startsWith("."))?getQualifiedName(att.getType(), basePkg).substring(1)+att.getName():getQualifiedName(att.getType(), basePkg); %>	
	<%=UML13JavaSourceHelper.getAttributeJavadoc(att)%>
	<%=att.getVisibility().toString().substring(3)%> <%=attTypeName%> <%=att.getName()%>;
	
	<%=UML13JavaSourceHelper.getAttributeJavadocGetter(att)%>
	public <%=attTypeName%> get<%=capFirst(att.getName())%>()
	{
		return <%=att.getName()%>;
	}
	
	<%=UML13JavaSourceHelper.getAttributeJavadocSetter(att)%>	
	public void set<%=capFirst(att.getName())%>(<%=attTypeName%> <%=att.getName()%>)
	{
		this.<%=att.getName()%> = <%=att.getName()%>;
	}
<% } %>
<%//Iterate through all the association and generate getters and setters for the association%>
<% for(Iterator i = UML13Utils.getAssociationEnds(klass).iterator(); i.hasNext();){%>
	<% AssociationEnd thisEnd = (AssociationEnd)i.next();
		AssociationEnd otherEnd = (AssociationEnd)UML13Utils.getOtherAssociationEnd(thisEnd);
  		String fullyQualifiedTargetClassName = getQualifiedName(otherEnd.getType(), basePkg);
  	%>
	<% if(otherEnd.isNavigable()){ %>
		<% if(UML13Utils.isMany2Many(thisEnd, otherEnd) || UML13Utils.isOne2Many(thisEnd, otherEnd)){ %>
		<%//Other end of the association is MANY%>
	<%=UML13JavaSourceHelper.getAssociationAttributeJavadoc(otherEnd.getType().getName(), true)%>		
	private java.util.Collection <%=otherEnd.getName()%> = new java.util.HashSet();
	
	<%=UML13JavaSourceHelper.getAssociationAttributeJavadocGetter(otherEnd.getName())%>		
	public java.util.Collection get<%=capFirst(otherEnd.getName())%>()
	{
		if (<%=otherEnd.getName()%>==null || <%=otherEnd.getName()%>.getClass().getName().indexOf("PersistentSet")>0)		
		{
	      try 
			{
				String idString = (Class.forName("java.lang.String").isInstance(getId()))? "'"+ getId() + "'" : ""+getId(); 
				String hql = "select parent.<%=otherEnd.getName()%> from <%=fullyQualifiedClassName%> as parent where parent.id="+idString;
				
				HQLCriteria hqlCriteria = new HQLCriteria(hql);
				ApplicationService applicationService = ApplicationServiceProvider.getApplicationService();
				java.util.List resultList = applicationService.query(hqlCriteria,"<%=fullyQualifiedTargetClassName%>");				 
				<%=otherEnd.getName()%> = resultList;	 
			}
			catch(Exception ex) 
			{
				Logger log = Logger.getLogger(<%=klass.getName()%>.class.getName());
				log.error("<%=klass.getName()%>:get<%=capFirst(otherEnd.getName())%> throws exception ... ...",ex);
			}
		}	
		return <%=otherEnd.getName()%>;
	}
	
	<%=UML13JavaSourceHelper.getAssociationAttributeJavadocSetter(otherEnd.getName())%>		
	public void set<%=capFirst(otherEnd.getName())%>(java.util.Collection <%=otherEnd.getName()%>)
	{
		this.<%=otherEnd.getName()%> = <%=otherEnd.getName()%>;
	}	
		<% } else if( UML13Utils.isMany2One(thisEnd, otherEnd)|| UML13Utils.isOne2One(thisEnd, otherEnd)){ %>
		<%//Other end of the association is ONE%>
	<%=UML13JavaSourceHelper.getAssociationAttributeJavadoc(otherEnd.getType().getName(), false)%>		
	private <%=fullyQualifiedTargetClassName%> <%=otherEnd.getName()%>;

	<%=UML13JavaSourceHelper.getAssociationAttributeJavadocGetter(otherEnd.getName())%>		
	public <%=fullyQualifiedTargetClassName%> get<%=capFirst(otherEnd.getName())%>()
	{
			<% if (eagerFetchPackages.contains(pkgName)) {%>
		return <%=otherEnd.getName()%>;			
			<% } else { %>
		if(<%=otherEnd.getName()%>==null ||  <%=otherEnd.getName()%>.getClass().getName().indexOf('$')>0)
		{			
			try
			{
				String idString = (Class.forName("java.lang.String").isInstance(getId()))? "'"+ getId() + "'" : ""+getId(); 
				String hql = "select parent.<%=otherEnd.getName()%> from <%=fullyQualifiedClassName%> as parent where parent.id="+idString;
				HQLCriteria hqlCriteria = new HQLCriteria(hql);
				ApplicationService applicationService = ApplicationServiceProvider.getApplicationService();
				java.util.List resultList = applicationService.query(hqlCriteria,"<%=fullyQualifiedTargetClassName%>");				 
				if (resultList!=null && resultList.size()>0) 
					<%=otherEnd.getName()%> = (<%=fullyQualifiedTargetClassName%>)resultList.get(0);
				else
					<%=otherEnd.getName()%> = null;
			}
			catch(Exception ex) 
			{ 
				Logger log = Logger.getLogger(<%=klass.getName()%>.class.getName());
				log.error("<%=klass.getName()%>:get<%=capFirst(otherEnd.getName())%> throws exception ... ...",ex);
			}
		}
		return <%=otherEnd.getName()%>;	
			<% } %>		
	}

	<%=UML13JavaSourceHelper.getAssociationAttributeJavadocSetter(otherEnd.getName())%>		
	public void set<%=capFirst(otherEnd.getName())%>(<%=fullyQualifiedTargetClassName%> <%=otherEnd.getName()%>)
	{
		this.<%=otherEnd.getName()%> = <%=otherEnd.getName()%>;
	}
		<% }else{ %>
			<% if(true) throw new RuntimeException("Unknown association multiplicity: " + thisEnd.getType().getName() + "." + thisEnd.getName() + ".upper=" + ((MultiplicityRange)thisEnd.getMultiplicity().getRange().iterator().next()).getUpper() + ", " + otherEnd.getType().getName() + "." + otherEnd.getName() + ".upper=" + ((MultiplicityRange)otherEnd.getMultiplicity().getRange().iterator().next()).getUpper()); %>
		<% } %>
	<% }else{//end if otherEnd.isNavigable() %>
		<% if(otherEnd.getAggregation().equals(AggregationKindEnum.AK_AGGREGATE)){ %>
	private Long <%=otherEnd.getName()%>Id;
	public Long get<%=capFirst(otherEnd.getName())%>Id()
	{
		return <%=otherEnd.getName()%>Id;
	}
		<% } %>
	<% } %>
<% } %>

	public boolean equals(Object obj)
	{
		boolean eq = false;
		if(obj instanceof <%=klass.getName() %>) 
		{
			<%=klass.getName() %> c =(<%=klass.getName() %>)obj; 			 
			<%=getIdAtt((UmlClass)klass).getType().getName()%> thisId = getId();		
			<%if (isPrimitive(getIdAtt((UmlClass)klass).getType().getName())) {%>
			if(thisId == c.getId())
				eq = true;
			<% } else { %>
			if(thisId != null && thisId.equals(c.getId()))
				eq = true;
			<% } %>
			}
			return eq;
		}
		
	public int hashCode()
	{
		int h = 0;
		<%if (isPrimitive(getIdAtt((UmlClass)klass).getType().getName())) {%>
		h += (new Long(getId())).hashCode();
		<% } else { %>
		if(getId() != null)
			h += getId().hashCode();
		<% } %>
		return h;
	}
}