<%@ jet package="gov.nih.nci.codegen.core.template.jet" 
        class="BeanWS"
        skeleton="BeanSkel.skeleton" %>

<%
Classifier klass = (Classifier)context.get("modelElement");
String basePkg = (String)context.get("basePackage");
String basePkg1 = null;
String isAbstract = new String();

if (klass.isAbstract()) {
  isAbstract="abstract";
} 
if (isAbstract.equals("abstract")){
   
}
%>

package <%=UML13Utils.getNamespaceName(UML13Utils.getPackage(UML13Utils.getModel(klass), basePkg), klass)%>.ws;
import gov.nih.nci.system.applicationservice.*;
import java.util.*;
/**
 * <!-- LICENSE_TEXT_START -->
 * <!-- LICENSE_TEXT_END -->
 */

public <% if (isAbstract.equals("abstract")) {%> <%=isAbstract%><%}%> class <%=klass.getName()%> 
<% UmlClass superClass = UML13Utils.getSuperClass((UmlClass)klass); %>
<% if(superClass != null){ %>
<%	String superPkgName = null;
	if(superClass != null)
		superPkgName = UML13Utils.getNamespaceName(UML13Utils.getPackage(UML13Utils.getModel(superClass), basePkg), superClass);
%>
    extends <%=superPkgName%>.ws.<%=superClass.getName()%>
<% } %>
	implements java.io.Serializable
{
	private static final long serialVersionUID = 1234567890L;

	<% for(Iterator i = UML13Utils.getAttributes((UmlClass)klass).iterator(); i.hasNext();){ %>
	   <% Attribute att = (Attribute)i.next(); %>
	   <%=att.getVisibility().toString().substring(3)%> <% if(getQualifiedName(att.getType(), basePkg).startsWith(".")){%><%=getQualifiedName(att.getType(), basePkg).substring(1)%> <%=att.getName()%>;<%} else {%><%=getQualifiedName(att.getType(), basePkg)%> <%=att.getName()%>;<%}%>
	   public <%if(getQualifiedName(att.getType(), basePkg).startsWith(".")){%><%=getQualifiedName(att.getType(), basePkg).substring(1)%><%} else { %> <%=getQualifiedName(att.getType(),basePkg)%><%}%> get<%=capFirst(att.getName())%>(){
	      return <%=att.getName()%>;
	   }
	   
	   public void set<%=capFirst(att.getName())%>(<% if(getQualifiedName(att.getType(), basePkg).startsWith(".")) {%><%=getQualifiedName(att.getType(), basePkg).substring(1)%> <%=att.getName()%>)<%} else {%> <%=getQualifiedName(att.getType(), basePkg)%> <%=att.getName()%>)<% } %>{
	      this.<%=att.getName()%> = <%=att.getName()%>;
	   }
	<% } %>

	<% for(Iterator i = UML13Utils.getAssociationEnds(klass).iterator(); i.hasNext();){%>
	   <% AssociationEnd thisEnd = (AssociationEnd)i.next(); %>
	   <% AssociationEnd otherEnd = (AssociationEnd)UML13Utils.getOtherAssociationEnd(thisEnd); %>
	   <% if(otherEnd.isNavigable()){ %>
	      <% if(UML13Utils.isMany2Many(thisEnd, otherEnd) || UML13Utils.isOne2Many(thisEnd, otherEnd)){ %>
			private java.util.Collection <%=otherEnd.getName()%> = new java.util.HashSet();
			public java.util.Collection get<%=capFirst(otherEnd.getName())%>(){
	              return <%=otherEnd.getName()%>;
	          }
			   
			   
			   
			   			   
	      <% } else if( UML13Utils.isMany2One(thisEnd, otherEnd) ){ %>
			
			<%
			String fullInterfaceName=getQualifiedName(otherEnd.getType(), basePkg);
		        String implName=fullInterfaceName.substring(fullInterfaceName.lastIndexOf(".")+1);
			String fullBeanName = fullInterfaceName.substring(0, fullInterfaceName.lastIndexOf("."))+".ws."+implName;
			%>
			
			
			private <%=fullBeanName%> <%=otherEnd.getName()%>;
			public <%=fullBeanName%> get<%=capFirst(otherEnd.getName())%>(){
			  return <%=otherEnd.getName()%>;
                        }
		   
	      <% }else if(UML13Utils.isOne2One(thisEnd, otherEnd)){ %>
<%
			String fullInterfaceName=getQualifiedName(otherEnd.getType(), basePkg);
		        String implName=fullInterfaceName.substring(fullInterfaceName.lastIndexOf(".")+1);
			String fullBeanName = fullInterfaceName.substring(0, fullInterfaceName.lastIndexOf("."))+".ws."+implName;
			%>
			
			
			private <%=fullBeanName%> <%=otherEnd.getName()%>;
			public <%=fullBeanName%> get<%=capFirst(otherEnd.getName())%>(){
			  return <%=otherEnd.getName()%>;			
                        }
                        
	      <% }else{ %>
		     <% if(true) throw new RuntimeException("Unknown association multiplicity: " + thisEnd.getType().getName() + "." + thisEnd.getName() + ".upper=" + ((MultiplicityRange)thisEnd.getMultiplicity().getRange().iterator().next()).getUpper() + ", " + otherEnd.getType().getName() + "." + otherEnd.getName() + ".upper=" + ((MultiplicityRange)otherEnd.getMultiplicity().getRange().iterator().next()).getUpper()); %>
	      <% } %>
	               
	   <% if(UML13Utils.isMany2Many(thisEnd, otherEnd) || UML13Utils.isOne2Many(thisEnd, otherEnd)){ %>
	   	public void set<%=capFirst(otherEnd.getName())%>(java.util.Collection <%=otherEnd.getName()%>){
	   		this.<%=otherEnd.getName()%> = <%=otherEnd.getName()%>;
	        }	
	   <% } else if(UML13Utils.isMany2One(thisEnd, otherEnd) || UML13Utils.isOne2One(thisEnd, otherEnd)){ %>
	   
	   <%
	   			String fullInterfaceName=getQualifiedName(otherEnd.getType(), basePkg);
	   		        String implName=fullInterfaceName.substring(fullInterfaceName.lastIndexOf(".")+1);
	   			String fullBeanName = fullInterfaceName.substring(0, fullInterfaceName.lastIndexOf("."))+".ws."+implName;
			%>
	   public void set<%=capFirst(otherEnd.getName())%>(<%=fullBeanName%> <%=otherEnd.getName()%>){
		this.<%=otherEnd.getName()%> = <%=otherEnd.getName()%>;
	   }	
	   <% } %>
	   <% }else{//end if otherEnd.isNavigable() %>
	      <% if(otherEnd.getAggregation().equals(AggregationKindEnum.AK_AGGREGATE)){ %>
	   private Long <%=otherEnd.getName()%>Id;
	   public Long get<%=capFirst(otherEnd.getName())%>Id(){
	      return <%=otherEnd.getName()%>Id;
	   }
	      <% } %>
	   <% } %>
	<% } %>

		public boolean equals(Object obj){
			boolean eq = false;
			if(obj instanceof <%=klass.getName() %>) {
				<%=klass.getName() %> c =(<%=klass.getName() %>)obj; 			 
				<%=getIdAtt((UmlClass)klass).getType().getName()%> thisId = getId();		
				<%if (isPrimitive(getIdAtt((UmlClass)klass).getType().getName())) {%>
				    if(thisId == c.getId()){
				       eq = true;
				    }
				 <% } else { %>
					if(thisId != null && thisId.equals(c.getId())) {
					   eq = true;
				    }		
				<% } %>
			}
			return eq;
		}
		
		public int hashCode(){
			int h = 0;
			<%if (isPrimitive(getIdAtt((UmlClass)klass).getType().getName())) {%>
			 h += (new Long(getId())).hashCode();
			<% } else { %>
			if(getId() != null) {
				h += getId().hashCode();
			}
			<% } %>
			return h;
	}
	
	
}
